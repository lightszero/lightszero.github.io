<--info "test"-->
	//名字相同的一组表示一个pass
	//这是pass test 的配置

	cull ccw;				// x y 模式 this.mapinfo["_def_"][x]=y
	cull = ccw;			// x = y 模式 this.mapinfo["_def_"][x]=y
	_def_ cull = ccw;		// cmd x = y 模式 this.mapinfo[cmd][x]=y
	//上面三个表达式是等同的

	ztest on
	alphablend off
	//默认值
	defvalue tex0 = grid


<--vs "test"-->
    precision mediump float;//指定浮点型精确度
	//这是pass test 的 vertexshader
    //attribute 都是命名写死的，请查阅文档
    //0.1
    
    attribute vec3 position;//顶点提供的数据
    attribute vec4 color; 
    attribute vec3 normal;
    attribute vec2 uv; 

    //uniform是部分命名写死的，请查阅文档，所有写死的都用_开头 ，比如 _matModel _matView _matProject
	
    uniform mat4 _matModel;//材质提供的数据
    uniform mat4 _matView;
    uniform mat4 _matProject;

    varying vec4 vColor;//输出给fs的参数
    varying vec2 vUv;//输出给fs的参数
    varying vec3 vInvViewDir;
    varying vec3 vNormal;
    void main(void) 
    {
		mat4 vp= _matProject * _matView;
	    mat4 mvp = vp *_matModel;
        vNormal = normal;
        gl_Position = mvp*vec4( position , 1);
        vInvViewDir = //-(_matView*vec4(0,0,1.0,0)).xyz;
            normalize((_matView[3] - gl_Position).xyz);
		vColor = color;
		vUv = uv;
    }
<-- fs "test" -->
    precision mediump float;//指定浮点型精确度
    varying vec4 vColor;//从vs接收的参数
    varying vec2 vUv;//从vs接收的参数
    varying vec3 vInvViewDir;
    varying vec3 vNormal;

    uniform mat4 _matModel;//材质提供的数据
    uniform sampler2D tex0;  //从外部设置的参数
    void main(void) 
    {
        vec3 vLightDirW = vec3(0,-0.5,0.8);
        vLightDirW=normalize(-vLightDirW);
       
        vec3 vNormalW = normalize(vec3(_matModel * vec4(vNormal, 0.0)));
        float ddp = max(0., dot(vNormalW, vLightDirW));
        vec3 directDiffuse =ddp*vec3(1,1,1);
        vec3 indirectDiffuse  = vec3(0.1,0.1,0.1);
		
        vec3 diffuseColor = texture2D(tex0, vUv).rgb;  
        vec3 angleW = normalize(vInvViewDir.xyz + vLightDirW);
        float specComp = max(0., dot(vNormalW, angleW));
        specComp = pow(specComp, max(1., 64.)) * 2.;
        
       
        //均衡能量
        diffuseColor *= 1.0-specComp;
        
        vec3 diffuse = (directDiffuse + indirectDiffuse) * diffuseColor;
        
        

        gl_FragColor =vec4(diffuse+ vec3(specComp),1);
    }

<--vs "t2"-->
precision highp float;

// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;
// Uniforms
uniform mat4 world;
// Varying
varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUV;

void main(void) {
    vec4 outPosition = worldViewProjection * vec4(position, 1.0);
    gl_Position = outPosition;
    
    vUV = uv;
    vPosition = position;
    vNormal = normal;
}

<--fs "t2"-->
precision highp float;

// Varying
varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUV;

// Uniforms
uniform mat4 world;
uniform mat4 worldViewProjection;
// Refs
uniform vec3 cameraPosition;
uniform sampler2D textureSampler;

void main(void) {
    vec3 vLightPosition = vec3(0,20,10);
    
    // World values
    vec3 vPositionW = vec3(world * vec4(vPosition, 1.0));
    vec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));
    vec3 viewDirectionW = normalize(cameraPosition - vPositionW);
    
    // Light
    vec3 lightVectorW = normalize(vLightPosition - vPositionW);
    vec3 color = texture2D(textureSampler, vUV).rgb;
    
    // diffuse
    float ndl = max(0., dot(vNormalW, lightVectorW));
    
    // Specular
    vec3 angleW = normalize(viewDirectionW + lightVectorW);
    float specComp = max(0., dot(vNormalW, angleW));
    specComp = pow(specComp, max(1., 64.)) * 2.;
    
    gl_FragColor = vec4(color * ndl + vec3(specComp), 1.);
}